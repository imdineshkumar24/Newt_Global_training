# -*- coding: utf-8 -*-
"""NewtGloabl-assingnments2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uqPxcyehqYaSVrhYCNefWA25eBHLXBaM
"""

!pip install pyspark
from pyspark.sql import SparkSession
spark = SparkSession.builder.master("local[1]").appName("NewtGlobal").getOrCreate()

"""Action Function

count
"""

#Create RDD from parallelize
sc = spark.sparkContext
data = [1,2,3,4,5,6,7,8,9,10,11,12]
rdd=sc.parallelize(data)
print(rdd.count())

"""collect"""

rdd=sc.parallelize(data)
print(rdd.collect())

"""first"""

print(rdd.first())

"""take"""

print(rdd.take(7))

data = [1,2,3,4,5,6,7,8,9,10]
rdd=sc.parallelize(data)
print(rdd.reduce(lambda x, y : x + y))

"""Transformation Function

Map
"""

from pyspark import SparkContext
sc=SparkContext.getOrCreate()
rdd = sc.parallelize([1,2,3,4,5,6,7])
print(rdd.map(lambda x: x+ 10).collect())

"""Filter"""

filter_rdd = sc.parallelize([1,2,3,4,5,6,7,8,9,10])
print(filter_rdd.filter(lambda x: x%3 == 0).collect())

filter_rdd_2 = sc.parallelize(['Kl Rahul', 'Ms Dhoni', 'Rohit', 'Virat', 'Rahane'])
print(filter_rdd_2.filter(lambda x: x.startswith('R')).collect())

union_inp = sc.parallelize([1,2,3,4,5,6,7,8,9,10,11,12])
union_rdd_1 = union_inp.filter(lambda x: x % 2 == 0)
print(union_rdd_1.collect())
union_rdd_2 = union_inp.filter(lambda x: x % 3 == 0)
print(union_rdd_2.collect())
print(union_rdd_1.union(union_rdd_2).collect())

int_inp = sc.parallelize([1,2,3,4,5,6,7,8,9,10,11,12])
int_rdd_1 = int_inp.filter(lambda x: x % 2 == 0)
print(int_rdd_1.collect())
int_rdd_2 = int_inp.filter(lambda x: x % 3 == 0)
print(int_rdd_2.collect())
print(int_rdd_1.intersection(int_rdd_2).collect())

print(int_rdd_1.subtract(int_rdd_2).collect())

flatmap_rdd = sc.parallelize(["Dhoni scored century against ENG", "and he got Man of The Match"])
(flatmap_rdd.flatMap(lambda x: x.split(" ")).collect())

#from pyspark import SparkContext, SparkConf

# Sample pair RDD with (key, value) pairs
pair_rdd = sc.parallelize([(1, 'Dhoni'), (2, 'Virat'), (3, 'Rohit'), (4, 'Sachin')])

def append_fruit(value):
    return value + " is a cricketer"

modified_rdd = pair_rdd.mapValues(append_fruit)

result = modified_rdd.collect()
print(result)

scores = [('dhoni', 88), ('kohli', 92), ('rohit', 83), ('dhawan', 93), ('jadeja', 78)]
sc.parallelize(scores).collect()

scores = sc.parallelize([('dhoni', 88), ('kohli', 92), ('rohit', 83), ('dhawan', 93), ('jadeja', 78)])
print(scores.reduceByKey(lambda x, y: x + y).collect())

print(scores.sortByKey(ascending=True).collect())

scores = sc.parallelize([('dhoni', 88), ('kohli', 92), ('rohit', 83), ('dhawan', 93), ('jadeja', 78),('rohit',88)])
dict_rdd = scores.groupByKey().collect()
for key, value in dict_rdd:
    print(key, list(value))

scores = sc.parallelize([('dhoni', 88), ('kohli', 92), ('rohit', 83), ('dhawan', 93), ('jadeja', 78),('rohit',88)])
ct_rdd = scores.countByKey().items()
for key, value in ct_rdd:
    print(key, value)